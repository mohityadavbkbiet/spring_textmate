# TextMate

TextMate is a full-stack web application designed for text manipulation and analysis. It features a Spring Boot backend for robust text processing and user authentication, and a React frontend for an interactive user interface. The application supports various text transformations (uppercase, lowercase, title case, reverse), real-time text analysis (word count, character count, sentence count, read time), and user history tracking.

## Features

*   **Text Transformations:** Convert text to uppercase, lowercase, title case, or reverse it.
*   **Text Analysis:** Get real-time statistics including word count, character count (excluding spaces), sentence count, and estimated reading time.
*   **User Authentication:** Secure user registration and login using JWT (JSON Web Tokens).
*   **Operation History:** Logged-in users can view their past text operations. Anonymous operations are tracked by session ID and can be merged upon login.
*   **Internationalization (i18n):** Supports multiple languages (English, Hindi, Spanish) for the frontend.
*   **Responsive Design:** Built with Bootstrap 5 for a mobile-first, responsive layout.
*   **Dark Mode:** Toggle between light and dark themes.

## Technologies Used

### Backend (Spring Boot)

*   **Framework:** Spring Boot 3.x
*   **Language:** Java 17
*   **Database:** MongoDB (Spring Data MongoDB)
*   **Security:** Spring Security, JWT (jjwt library)
*   **Build Tool:** Maven
*   **Logging:** SLF4J with Logback
*   **Utilities:** Lombok for boilerplate code reduction

### Frontend (React)

*   **Framework:** React 19
*   **Build Tool:** Vite
*   **Styling:** Tailwind CSS, Bootstrap 5
*   **HTTP Client:** Axios
*   **Language:** JavaScript (ES6+)
*   **State Management:** React Hooks (useState, useEffect, useRef, useCallback)
*   **Internationalization:** Custom i18n setup

### Deployment & Orchestration

*   **Containerization:** Docker
*   **Orchestration:** Docker Compose
*   **Web Server (Frontend):** Nginx

## Prerequisites

Before you begin, ensure you have the following installed on your system:

*   **Java Development Kit (JDK):** Version 17 or higher.
    *   [Download JDK](https://www.oracle.com/java/technologies/javase-downloads.html)
*   **Apache Maven:** Version 3.6.0 or higher.
    *   [Install Maven](https://maven.apache.org/install.html)
*   **Node.js:** Version 18.x or higher (LTS recommended).
    *   [Download Node.js](https://nodejs.org/en/download/)
*   **npm:** Comes with Node.js, ensure it's updated (`npm install -g npm@latest`).
*   **MongoDB:** A running instance of MongoDB. You can download and install it from [MongoDB Community Server](https://www.mongodb.com/try/download/community) or run it via Docker as shown in the Docker setup section.

## Setup and Run with Docker (Recommended)

This is the easiest way to get the entire application stack (backend, frontend, MongoDB) up and running.

**Important:** Ensure that ports `5000` (for frontend via Nginx), `8000` (for backend), and `27017` (for MongoDB) are free on your system before proceeding.
     

    git clone <url>
1.  **Navigate to the project root directory:**
    ```bash
     cd TextMate
    ```

2.  **Build and start the Docker containers:**
    This command will build the Docker images for both the backend and frontend, create the necessary containers, and start them.
    ```bash
    docker-compose up --build
    ```
    *   The first time you run this, it might take a few minutes to download base images and build the applications.
    *   The `--build` flag ensures that your images are rebuilt if there are any changes in the `Dockerfile` or source code.

3.  **Access the application:**
    Once the containers are up and running, the frontend will be accessible in your web browser at:
    [http://localhost:5000](http://localhost:5000)

    The backend API will be running internally within Docker on port `8000` and is proxied by Nginx.

4.  **To stop the application:**
    Press `Ctrl+C` in your terminal where `docker-compose up` is running. Then, to stop and remove the containers, networks, and volumes created by `docker-compose` (including MongoDB data if not explicitly mounted to a persistent volume), run:
    ```bash
    docker compose down -v
    ```

## Setup and Run without Docker

If you prefer to run the backend and frontend services directly on your machine, follow these steps.

**Important:** Before proceeding, ensure the following ports are free on your system:
*   `8000` (for the Spring Boot backend)
*   `5000` (for the React development server, though Vite might pick another if 5173 is busy)
*   `27017` (for MongoDB)

git clone <>
cd Textmate
### 1. Start MongoDB

Ensure you have a MongoDB instance running and accessible on `localhost:27017`. The application expects to connect to `mongodb://localhost:27017/textmate_db.

*   **If MongoDB is installed as a service:** Verify it's running.
*   **If you need to start it manually (example for Windows for linux also):**
    ```bash
    "mongod" --dbpath "C:\data\db"
    ```
    
*   **Alternatively, you can run MongoDB using Docker (if Docker Desktop is installed):**
    ```bash
    docker run --name textmate-mongo -p 27017:27017 -d mongo:latest
    ```

### 2. Backend (Spring Boot)

1.  **Navigate to the backend directory:**
    ```bash
     cd Backend_Spring_Boot
    ```

2.  **Run the Spring Boot application:**
    This will compile the Java code (if necessary) and start the backend server.
    ```bash
    # For Linux/macOS
    ./mvnw spring-boot:run

    # For Windows
    ./mvnw.cmd spring-boot:run
    ```
    *   The backend will be running on `http://localhost:8000`.

### 3. Frontend (React)

1.  **Navigate to the frontend directory:**
    ```bash
    cd Frontend
    ```

2.  **Install frontend dependencies:**
    This command downloads all the necessary Node.js modules for the React application.
    ```bash
    npm install
    ```

3.  **Start the development server:**
    This will start the React development server. It is configured to proxy API requests to the backend running on `http://localhost:5000`.
    ```bash
    npm run dev
    ```
    *   The frontend will typically be running on `http://localhost:5000` (or another available port, as indicated in your terminal output). Open this URL in your web browser.

## API Endpoints

The Spring Boot backend exposes the following RESTful API endpoints:

*   `POST /api/signup`: Register a new user.
    *   **Request Body:** `{ "username": "string", "password": "string" }`
    *   **Response:** `ApiResponse` (success/failure message)
*   `POST /api/login`: Authenticate a user and receive a JWT token.
    *   **Request Body:** `{ "username": "string", "password": "string" }`
    *   **Response:** `ApiResponse` (success message, JWT token)
*   `POST /api/uppercase`: Convert text to uppercase.
    *   **Request Body:** `{ "text": "string" }`
    *   **Response:** `ApiResponse` (transformed text)
*   `POST /api/lowercase`: Convert text to lowercase.
    *   **Request Body:** `{ "text": "string" }`
    *   **Response:** `ApiResponse` (transformed text)
*   `POST /api/titlecase`: Convert text to title case.
    *   **Request Body:** `{ "text": "string" }`
    *   **Response:** `ApiResponse` (transformed text)
*   `POST /api/reverse`: Reverse text.
    *   **Request Body:** `{ "text": "string" }`
    *   **Response:** `ApiResponse` (transformed text)
*   `POST /api/analyze`: Analyze text for word count, character count, sentence count, and reading time.
    *   **Request Body:** `{ "text": "string" }`
    *   **Response:** `ApiResponse` (TextAnalysisResult object)
*   `GET /api/history`: Retrieve the operation history for the authenticated user.
    *   **Authentication:** Requires a valid JWT in the `Authorization: Bearer <token>` header.
    *   **Response:** `ApiResponse` (list of `OperationLog` objects)

## Project Structure

```
TextMate/
├── .dockerignore
├── .gitignore
├── docker-compose.yml             # Docker Compose configuration for both services
├── README.md                      # This file
├── Backend_Spring_Boot/           # Spring Boot Backend
│   ├── .mvn/                      # Maven Wrapper files
│   ├── mvnw                       # Maven Wrapper script (Linux/macOS)
│   ├── mvnw.cmd                   # Maven Wrapper script (Windows)
│   ├── pom.xml                    # Maven project configuration
│   ├── Dockerfile                 # Dockerfile for the Spring Boot application
│   └── src/
│       ├── main/
│       │   ├── java/
│       │   │   └── com/textmate/textmatebackend/
│       │   │       ├── TextmateBackendApplication.java # Main application entry point
│       │   │       ├── config/      # Spring Security & JWT configuration
│       │   │       ├── controller/  # REST API controllers
│       │   │       ├── model/       # Data models (User, OperationLog, etc.)
│       │   │       ├── repository/  # MongoDB repositories
│       │   │       ├── service/     # Business logic services
│       │   │       └── util/        # Utility classes (TextUtils)
│       │   └── resources/
│       │       └── application.properties # Spring Boot configuration (ports, MongoDB, JWT secrets)
│       └── test/                  # Unit and integration tests
└── Frontend/                      # React Frontend
    ├── .gitignore
    ├── Dockerfile                 # Dockerfile for the React application (Nginx)
    ├── nginx.conf                 # Nginx configuration for serving React app and proxying API
    ├── package.json               # Node.js project configuration and dependencies
    ├── package-lock.json
    ├── tailwind.config.js         # Tailwind CSS configuration
    ├── vite.config.js             # Vite build tool configuration
    ├── public/                    # Static assets
    └── src/
        ├── App.jsx                # Main React component
        ├── index.css              # Global CSS
        ├── main.jsx               # React entry point
        ├── assets/                # Images, styles
        ├── components/            # Reusable UI components (Modals, Header, Footer, etc.)
        ├── hooks/                 # Custom React hooks (useTextMate)
        └── utils/                 # Utility functions (API calls, i18n translations)
```